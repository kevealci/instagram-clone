{"version":3,"sources":["constants/routes.js","context/firebase.js","lib/firebase.js","context/user.js","hooks/useAuthListener.js","helpers/Protected.Route.js","helpers/IsUserLoggedIn.js","App.js","index.js"],"names":["DASHBOARD","LOGIN","SIGN_UP","PROFILE","NOT_FOUND","FirebaseContext","createContext","firebase","Firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","FieldValue","firestore","UserContext","useAuthListener","useState","JSON","parse","localStorage","getItem","user","setUser","useContext","useEffect","listener","auth","onAuthStateChanged","authUser","setItem","stringify","removeItem","ProtectedRoute","children","rest","render","location","to","pathname","ROUTES","state","from","IsUserLoggedIn","loggedInPath","Login","lazy","SignUp","Dashboard","Profile","NotFound","App","Provider","value","fallback","path","component","exact","ReactDOM","document","getElementById"],"mappings":"yHAAA,0KAAO,IAAMA,EAAY,IACZC,EAAQ,SACRC,EAAU,WACVC,EAAU,eACVC,EAAY,c,gCCJzB,WAEMC,EAAkBC,wBAAc,MAEvBD,O,gCCJf,gFAgBME,GAhBN,YAgBiBC,IAASC,cATX,CACbC,OAAQ,0CACRC,WAAY,wCACZC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,+CAIDC,EAAeR,IAASS,UAAxBD,Y,gCCjBR,WAEME,EAAcZ,wBAAc,MAEnBY,O,uICsBAC,EAvBS,WAAO,IAAD,EACJC,mBAASC,KAAKC,MAAMC,aAAaC,QAAQ,cADrC,mBACrBC,EADqB,KACfC,EADe,KAEpBnB,EAAaoB,qBAAWtB,KAAxBE,SAkBR,OAhBAqB,qBAAU,WACR,IAAMC,EAAWtB,EAASuB,OAAOC,oBAAmB,SAACC,GAC/CA,GAEFT,aAAaU,QAAQ,WAAYZ,KAAKa,UAAUF,IAChDN,EAAQM,KAGRT,aAAaY,WAAW,YACxBT,EAAQ,UAIZ,OAAO,kBAAMG,OACZ,CAACtB,IAEG,CAAEkB,S,uBCnBI,SAASW,EAAT,GAAsD,IAA5BX,EAA2B,EAA3BA,KAAMY,EAAqB,EAArBA,SAAaC,EAAQ,mCAClE,OACE,cAAC,IAAD,2BACMA,GADN,IAEEC,OAAQ,YAAmB,IAAhBC,EAAe,EAAfA,SACT,OAAIf,EACKY,EAGJZ,EAWE,KATH,cAAC,IAAD,CACEgB,GAAI,CACFC,SAAUC,IACVC,MAAO,CAAEC,KAAML,UCfhB,SAASM,EAAT,GAAoE,IAA1CrB,EAAyC,EAAzCA,KAAMsB,EAAmC,EAAnCA,aAAcV,EAAqB,EAArBA,SAAaC,EAAQ,kDAChF,OACE,cAAC,IAAD,2BACMA,GADN,IAEEC,OAAQ,YAAmB,IAAhBC,EAAe,EAAfA,SACT,OAAKf,EAIDA,EAEA,cAAC,IAAD,CACEgB,GAAI,CACFC,SAAUK,EACVH,MAAO,CAAEC,KAAML,MAMhB,KAdEH,MCAjB,IAAMW,EAAQC,gBAAK,kBAAM,gCACnBC,EAASD,gBAAK,kBAAM,gCACpBE,EAAYF,gBAAK,kBAAM,6DACvBG,EAAUH,gBAAK,kBAAM,sDACrBI,EAAWJ,gBAAK,kBAAM,gCA2BbK,MAzBf,WAAgB,IACN7B,EAASN,IAATM,KACR,OACE,cAAC,IAAY8B,SAAb,CAAsBC,MAAO,CAAE/B,QAA/B,SACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUgC,SAAU,2CAApB,SACE,eAAC,IAAD,WACE,cAACX,EAAD,CAAgBrB,KAAMA,EAAMsB,aAAcJ,IAAkBe,KAAMf,IAAlE,SACE,cAACK,EAAD,MAEF,cAACF,EAAD,CAAgBrB,KAAMA,EAAMsB,aAAcJ,IAAkBe,KAAMf,IAAlE,SACE,cAACO,EAAD,MAEF,cAAC,IAAD,CAAOQ,KAAMf,IAAgBgB,UAAWP,IACxC,cAAChB,EAAD,CAAgBX,KAAMA,EAAMiC,KAAMf,IAAkBiB,OAAK,EAAzD,SACE,cAACT,EAAD,MAEF,cAAC,IAAD,CAAOO,KAAK,IAAIE,OAAK,EAACD,UAAWN,c,cCzB7CQ,IAAStB,OACP,cAAC,IAAgBgB,SAAjB,CAA0BC,MAAO,CAAEjD,aAAUS,gBAA7C,SACE,cAAC,EAAD,MAEF8C,SAASC,eAAe,W","file":"static/js/main.20899bb6.chunk.js","sourcesContent":["export const DASHBOARD = '/';\nexport const LOGIN = '/login';\nexport const SIGN_UP = '/sign-up';\nexport const PROFILE = '/p/:username';\nexport const NOT_FOUND = '/not-found';\n","import { createContext } from 'react';\n\nconst FirebaseContext = createContext(null);\n\nexport default FirebaseContext;\n","import Firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n// here I want to import the seed file\n/* import { seedDatabase } from '../seed'; */\n\nconst config = {\n  apiKey: 'AIzaSyAcJzOoEX_kety8dkSwTI0HHZ2AwpnRZxo',\n  authDomain: 'instagram-clone-7057b.firebaseapp.com',\n  projectId: 'instagram-clone-7057b',\n  storageBucket: 'instagram-clone-7057b.appspot.com',\n  messagingSenderId: '942306765196',\n  appId: '1:942306765196:web:7b25726254a12e81c60ea9'\n};\n\nconst firebase = Firebase.initializeApp(config);\nconst { FieldValue } = Firebase.firestore;\n\n// here is where I want to call the seed file (only ONCE!)\n/* seedDatabase(firebase); */\n\nexport { firebase, FieldValue };\n","import { createContext } from 'react';\n\nconst UserContext = createContext(null);\n\nexport default UserContext;\n","import { useState, useEffect, useContext } from 'react';\nimport FirebaseContext from '../context/firebase';\n\nconst useAuthListener = () => {\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('authUser')));\n  const { firebase } = useContext(FirebaseContext);\n\n  useEffect(() => {\n    const listener = firebase.auth().onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // we have a user... therefore we can store the user in localstorage\n        localStorage.setItem('authUser', JSON.stringify(authUser));\n        setUser(authUser);\n      } else {\n        // we donÂ´t have an authUser, therefore clear the localsotrage\n        localStorage.removeItem('authUser');\n        setUser(null);\n      }\n    });\n\n    return () => listener();\n  }, [firebase]);\n\n  return { user };\n};\n\nexport default useAuthListener;\n","import PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\nimport * as ROUTES from '../constants/routes';\n\nexport default function ProtectedRoute({ user, children, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) => {\n        if (user) {\n          return children;\n        }\n\n        if (!user) {\n          return (\n            <Redirect\n              to={{\n                pathname: ROUTES.LOGIN,\n                state: { from: location }\n              }}\n            />\n          );\n        }\n\n        return null;\n      }}\n    />\n  );\n}\n\nProtectedRoute.propTypes = {\n  user: PropTypes.object,\n  children: PropTypes.object\n};\n","import PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\n\nexport default function IsUserLoggedIn({ user, loggedInPath, children, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) => {\n        if (!user) {\n          return children;\n        }\n\n        if (user) {\n          return (\n            <Redirect\n              to={{\n                pathname: loggedInPath,\n                state: { from: location }\n              }}\n            />\n          );\n        }\n\n        return null;\n      }}\n    />\n  );\n}\n\nIsUserLoggedIn.propTypes = {\n  user: PropTypes.object,\n  loggedInPath: PropTypes.string,\n  children: PropTypes.object\n};\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport * as ROUTES from './constants/routes';\nimport UserContext from './context/user';\nimport useAuthListener from './hooks/useAuthListener';\n\nimport ProtectedRoute from './helpers/Protected.Route';\nimport IsUserLoggedIn from './helpers/IsUserLoggedIn';\n\nconst Login = lazy(() => import('./pages/login'));\nconst SignUp = lazy(() => import('./pages/sign-up'));\nconst Dashboard = lazy(() => import('./pages/dashboard'));\nconst Profile = lazy(() => import('./pages/profile'));\nconst NotFound = lazy(() => import('./pages/not-found'));\n\nfunction App() {\n  const { user } = useAuthListener();\n  return (\n    <UserContext.Provider value={{ user }}>\n      <Router>\n        <Suspense fallback={<p>Loading...</p>}>\n          <Switch>\n            <IsUserLoggedIn user={user} loggedInPath={ROUTES.DASHBOARD} path={ROUTES.LOGIN}>\n              <Login />\n            </IsUserLoggedIn>\n            <IsUserLoggedIn user={user} loggedInPath={ROUTES.DASHBOARD} path={ROUTES.SIGN_UP}>\n              <SignUp />\n            </IsUserLoggedIn>\n            <Route path={ROUTES.PROFILE} component={Profile} />\n            <ProtectedRoute user={user} path={ROUTES.DASHBOARD} exact>\n              <Dashboard />\n            </ProtectedRoute>\n            <Route path=\"*\" exact component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport FirebaseContext from './context/firebase';\nimport { firebase, FieldValue } from './lib/firebase';\nimport './styles/app.css';\n\nReactDOM.render(\n  <FirebaseContext.Provider value={{ firebase, FieldValue }}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}